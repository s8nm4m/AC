P16 assembler v1.4.0 (Mar  6 2023)	cp2nat.lst	Wed Mar 22 23:10:38 2023

Sections
Index   Name            Address   Size
0       .startup        0000      0012 18
1       .text           0012      004E 78
2       .data           0060      0004 4
3       .stack          0064      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
char2nat                LABEL     0024 36     .text
else_if                 LABEL     003A 58     .text
if                      LABEL     0028 40     .text
if_2                    LABEL     0058 88     .text
if_cond1                LABEL     004C 76     .text
if_cond2                LABEL     0054 84     .text
if_end                  LABEL     005C 92     .text
line#13                 LABEL     000C 12     .startup
line#6                  LABEL     0002 2      .startup
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     .startup
NAN                     ABSOLUTE  FFFF 65535  .startup
radix                   LABEL     0062 98     .data
radix_addr              LABEL     0022 34     .text
STACK_SIZE              ABSOLUTE  0040 64     .startup
symbol                  LABEL     0060 96     .data
symbol_addr             LABEL     0020 32     .text
tos                     LABEL     00A4 164    .stack
tos_addr                LABEL     000E 14     .startup

Code listing
   1          	.equ NAN, 0xFFFF
   2          	.equ STACK_SIZE, 64
   3           	
   4           	.section .startup
   5 0000 01 58	    b _start
   6 0002 FF 5B	    b .
   7           	
   8           	_start:
   9 0004 4D 0C	    ldr sp, tos_addr
  10 0006 80 B7	    mov r0, pc
  11 0008 0E A2	    add lr, r0, #4
  12 000A 2F 0C	    ldr pc, main_addr
  13 000C FF 5B	    b . ; e suposto dar 0
  14           	
  15           	tos_addr:
  16 000E A4 00	    .word tos
  17           	
  18           	main_addr:
  19 0010 12 00	    .word main
  20           	
  21           	.text
  22           	
  23           	main:
  24 0012 0E 24	    push lr
  25 0014 50 0C	    ldr r0, symbol_addr
  26 0016 00 00	    ldr r0, [r0, #0]
  27 0018 41 0C	    ldr r1, radix_addr
  28 001A 11 00	    ldr r1, [r1, #0]
  29 001C 03 5C	    bl char2nat
  30 001E 0F 04	    pop pc
  31           	
  32           	;r0 = symbol, r1 = radix, r2 = number
  33           	;r3 temporary values
  34           	
  35           	symbol_addr:
  36 0020 60 00	    .word symbol
  37           	
  38           	radix_addr:
  39 0022 62 00	    .word radix
  40           	
  41           	char2nat:
  42 0024 F2 6F	    mov r2, #NAN & 0xFF
  43 0026 F2 7F	    movt r2, #NAN & 0xFF
  44           	if:
  45 0028 03 63	    mov r3, #'0'
  46 002A 80 B9	    cmp r0, r3          ; symbol >= '0'
  47 002C 06 48	    blo else_if
  48 002E 93 63	    mov r3, #'9'         
  49 0030 30 B8	    cmp r3, r0          ; symbol <= '9'
  50 0032 03 48	    blo else_if
  51 0034 03 63	    mov r3, #'0'
  52 0036 82 89	    sub r2, r0, r3      ; number = symbol - '0'
  53 0038 09 58	    b if_cond1
  54           	else_if: 
  55 003A 13 64	    mov r3, #'A'         
  56 003C 80 B9	    cmp r0, r3          ; symbol >= 'A'
  57 003E 06 48	    blo if_cond1
  58 0040 63 64	    mov r3, #'F' 
  59 0042 30 B8	    cmp r3, r0          ; symbol <= 'F'
  60 0044 03 48	    blo if_cond1
  61 0046 13 64	    mov r3, #'A' 
  62 0048 82 89	    sub r2, r0, r3      ; number = symbol - 'A'
  63 004A 22 A5	    add r2, r2, #10     ; number = r5 + 10
  64           	if_cond1:
  65 004C 03 61	    mov r3, #16
  66 004E B0 B8	    cmp r3, r1          ; radix > 16
  67 0050 01 4C	    bhs if_cond2
  68 0052 02 58	    b if_2
  69           	if_cond2:
  70 0054 A0 B8	    cmp r2, r1          ; number >= radix
  71 0056 02 48	    blo if_end
  72           	if_2:
  73 0058 F2 6F	    mov r2, #NAN & 0xFF
  74 005A F2 7F	    movt r2, #NAN & 0xFF  
  75           	if_end:
  76 005C 00 B1	    mov r0, r2          ; return number
  77 005E 0F B7	    mov pc, lr
  78           	    
  79           	.data
  80           	
  81           	symbol:
  82 0060 37 00	    .word 0x0037 ; nao esta a funcionar .ascii '0'
  83           	
  84           	radix:
  85 0062 08 00	    .word 8
  86           	
  87           	.section .stack
  88 0064 00   	.space STACK_SIZE
  88 .... ..
  88 00A3 00
  89           	
  90           	tos:
