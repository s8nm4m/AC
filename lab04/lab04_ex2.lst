P16 assembler v1.4.0 (Mar  6 2023)	c:\Users\ammit\Desktop\ISEL\2223\LEIC\s2\AC\AC\lab04\lab04_ex2.lst	Wed May 17 11:30:02 2023

Sections
Index   Name            Address   Size
0       startup         0000      000E 14
1       .text           000E      0042 66
2       .data           0050      0000 0
3       .bss            0050      0001 1
4       .stack          0052      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
ENABLE_EXTINT           ABSOLUTE  0010 16     startup
fed_addr_isr            LABEL     004E 78     .text
fed_addr_main           LABEL     002C 44     .text
FED_ADDRESS             ABSOLUTE  FF40 65344  startup
isr                     LABEL     0036 54     .text
isr_addr                LABEL     000C 12     startup
main                    LABEL     000E 14     .text
main_addr               LABEL     000A 10     startup
main_loop               LABEL     0022 34     .text
outport_addr            LABEL     0034 52     .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_write           LABEL     002E 46     .text
STACK_SIZE              ABSOLUTE  0040 64     startup
tos                     LABEL     0092 146    .stack
tos_addr                LABEL     0008 8      startup
var                     LABEL     0050 80     .bss
var_addr_isr            LABEL     004C 76     .text
var_addr_main           LABEL     002A 42     .text
VAR_INIT_VAL            ABSOLUTE  0000 0      startup

Code listing
   1           	; Descricao: Programa de suporte a realizacao da 4a atividade laboratorial de
   2           	;            Arquitetura de Computadores.
   3           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   4           	; Data:      28-04-2023
   5           	
   6           	; Definicao dos valores dos simbolos utilizados no programa
   7           	;
   8           	
   9           	; *** Inicio de troco para completar ***
  10          		.equ	ENABLE_EXTINT, 0x0010         ; ??
  11           	; *** Fim de troco para completar ***
  12           	
  13          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  14           	
  15          		.equ	OUTPORT_ADDRESS, 0xFFC0       ; Endereco do porto de saida
  16           	
  17           	; *** Inicio de troco para completar ***
  18          		.equ	FED_ADDRESS, 0xFF40          ; ??
  19           	; *** Fim de troco para completar ***
  20           	
  21          		.equ	VAR_INIT_VAL, 0               ; Valor inicial de var
  22           	
  23           	; Seccao:    startup
  24           	; Descricao: Guarda o código de arranque do sistema
  25           	;3.3.1)	A funcionalidade do circuito FED é detetar uma transiçao de 1 para 0.
  26           	;3.3.2) A secçao startup fica conforme a convençao, e o circuito FED está contabilizado nesta implementaçao
  27           	;3.3.3) B13 4
  28           	;3.3.4) B12 3
  29           		.section startup
  30 0000 01 58		b	_start
  31 0002 4F 0C		ldr	pc, isr_addr
  32           	_start:
  33 0004 1D 0C		ldr	sp, tos_addr
  34 0006 1F 0C		ldr	pc, main_addr
  35           	
  36           	tos_addr:
  37 0008 92 00		.word	tos
  38           	main_addr:
  39 000A 0E 00		.word	main
  40           	isr_addr:
  41 000C 36 00		.word	isr
  42           	
  43           	; Seccao:    text
  44           	; Descricao: Guarda o código do programa
  45           	;
  46           		.text
  47           	
  48           	; Rotina:    main
  49           	; Descricao: *** Para completar ***
  50           	; Entradas:  *** Para completar ***
  51           	; Saidas:    *** Para completar ***
  52           	; Efeitos:   *** Para completar ***
  53           	main:
  54 000E 00 60		mov	r0, #VAR_INIT_VAL
  55 0010 C1 0C		ldr	r1, var_addr_main
  56 0012 10 28		strb	r0, [r1, #0]
  57 0014 0C 5C		bl	outport_write
  58 0016 A0 0C		ldr	r0, fed_addr_main
  59 0018 00 28		strb	r0, [r0, #0]
  60 001A 60 B0		mrs	r0, cpsr
  61 001C 01 61		mov	r1, #ENABLE_EXTINT
  62 001E 80 C8		orr	r0, r0, r1
  63 0020 40 B0		msr	cpsr, r0
  64           	main_loop:
  65 0022 30 0C		ldr	r0, var_addr_main
  66 0024 00 08		ldrb	r0, [r0, #0]
  67 0026 03 5C		bl	outport_write
  68 0028 FC 5B		b	main_loop
  69           	
  70           	var_addr_main:
  71 002A 50 00		.word	var
  72           	fed_addr_main:
  73 002C 40 FF		.word	FED_ADDRESS
  74           	
  75           	; Rotina:    outport_write
  76           	; Descricao: Escreve num porto de saida a 8 bits o valor passado como argumento.
  77           	;            Interface exemplo: void outport_write( uint8_t value );
  78           	; Entradas:  r0 - valor a escrever no porto de saida
  79           	; Saidas:    -
  80           	; Efeitos:   r1 - guarda o endereco do porto alvo da escrita
  81           	outport_write:
  82 002E 21 0C		ldr	r1, outport_addr
  83 0030 10 28		strb	r0, [r1, #0]
  84 0032 0F B7		mov	pc, lr
  85           	
  86           	outport_addr:
  87 0034 C0 FF		.word	OUTPORT_ADDRESS
  88           	
  89           	; Rotina:    isr
  90           	; Descricao: *** Para completar ***
  91           	; Entradas:  *** Para completar ***
  92           	; Saidas:    *** Para completar ***
  93           	; Efeitos:   *** Para completar ***
  94           	isr:
  95 0036 00 24		push	r0
  96 0038 01 24		push	r1
  97 003A 90 0C		ldr	r0, fed_addr_isr
  98 003C 02 28		strb	r2, [r0, #0]
  99 003E 60 0C		ldr	r0, var_addr_isr
 100 0040 01 08		ldrb	r1, [r0, #0]
 101 0042 91 A0		add	r1, r1, #1
 102 0044 01 28		strb	r1, [r0, #0]
 103 0046 01 04		pop	r1
 104 0048 00 04		pop	r0
 105 004A 20 B0		movs	pc, lr
 106           	
 107           	var_addr_isr:
 108 004C 50 00		.word	var
 109           	fed_addr_isr:
 110 004E 40 FF		.word	FED_ADDRESS
 111           	
 112           	; Seccao:    data
 113           	; Descricao: Guarda as variáveis globais com um valor inicial definido
 114           	;
 115           		.data
 116           	
 117           	; Seccao:    bss
 118           	; Descricao: Guarda as variáveis globais sem valor inicial definido
 119           	;
 120           		.bss
 121           	var:
 122 0050 00   		.space	1
 123           	
 124           	; Seccao:    stack
 125           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 126           	;
 127           		.stack
 128 0052 00   		.space	STACK_SIZE
 128 .... ..
 128 0091 00
 129           	tos:
