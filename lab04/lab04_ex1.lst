P16 assembler v1.4.0 (Mar  6 2023)	d:\ISEL\2223\LEIC\s2\AC\lab04\lab04_ex1.lst	Mon May 15 17:23:16 2023

Sections
Index   Name            Address   Size
0       startup         0000      001E 30
1       .text           001E      0022 34
2       .data           0040      0000 0
3       .bss            0040      0001 1
4       .stack          0042      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0014 20     startup
ENABLE_EXTINT           ABSOLUTE  0010 16     startup
main                    LABEL     001E 30     .text
main_addr               LABEL     001A 26     startup
main_loop               LABEL     002E 46     .text
outport_addr            LABEL     003E 62     .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_write           LABEL     0038 56     .text
STACK_SIZE              ABSOLUTE  0040 64     startup
tos                     LABEL     0082 130    .stack
tos_addr                LABEL     0018 24     startup
var                     LABEL     0040 64     .bss
var_addr_main           LABEL     0036 54     .text
var_addr_startup        LABEL     001C 28     startup
VAR_INIT_VAL            ABSOLUTE  0000 0      startup

Code listing
   1           	; Ficheiro:  ap04_ex1.S
   2           	; Descricao: Programa de suporte a realizacao da 4a atividade laboratorial de
   3           	;            Arquitetura de Computadores.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      28-04-2023
   6           	
   7           	; Definicao dos valores dos simbolos utilizados no programa
   8           	;
   9           	
  10           	; *** Inicio de troco para completar ***
  11          		.equ	ENABLE_EXTINT, 0x10           ; pois é o inicio da funçao de interrupçao
  12           	; *** Fim de troco para completar ***
  13           	
  14          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  15           	
  16          		.equ	OUTPORT_ADDRESS, 0xFFC0       ; Endereco do porto de saida
  17           	
  18          		.equ	VAR_INIT_VAL, 0               ; Valor inicial de var
  19           	
  20           	; Seccao:    startup
  21           	; Descricao: Guarda o código de arranque do sistema
  22           	
  23           	;3.2.3) é necessário habilitar as interrupçoes (troço 60 a 63). Após isto, quando houver uma transiçao do sinal exterior de interrupcao para 0, este troço é executado.
  24           	;3.2.4) a funcionalidade do programa é escrever o valor de "var" no outport. Quando ha uma interrupcao, o valor de "var" é incrementado por 1.
  25           	
  26           		.section startup
  27 0000 09 58		b	_start
  28 0002 00 24		push	r0
  29 0004 01 24		push	r1
  30 0006 A0 0C		ldr	r0, var_addr_startup
  31 0008 01 08		ldrb	r1, [r0, #0]
  32 000A 91 A0		add	r1, r1, #1
  33 000C 01 28		strb	r1, [r0, #0]
  34 000E 01 04		pop	r1
  35 0010 00 04		pop	r0
  36 0012 20 B0		movs	pc, lr
  37           	_start:
  38 0014 1D 0C		ldr	sp, tos_addr
  39 0016 1F 0C		ldr	pc, main_addr
  40           	
  41           	tos_addr:
  42 0018 82 00		.word	tos
  43           	main_addr:
  44 001A 1E 00		.word	main
  45           	var_addr_startup:
  46 001C 40 00		.word	var
  47           	
  48           	; Seccao:    text
  49           	; Descricao: Guarda o código do programa
  50           	;
  51           		.text
  52           	
  53           	; Rotina:    main
  54           	; Descricao: *** Para completar ***
  55           	; Entradas:  *** Para completar ***
  56           	; Saidas:    *** Para completar ***
  57           	; Efeitos:   *** Para completar ***
  58           	main:
  59 001E 00 60		mov	r0, #VAR_INIT_VAL
  60 0020 A1 0C		ldr	r1, var_addr_main
  61 0022 10 28		strb	r0, [r1, #0]
  62 0024 09 5C		bl	outport_write
  63 0026 60 B0		mrs	r0, cpsr
  64 0028 01 61		mov	r1, #ENABLE_EXTINT
  65 002A 80 C8		orr	r0, r0, r1
  66 002C 40 B0		msr	cpsr, r0
  67           	main_loop:
  68 002E 30 0C		ldr	r0, var_addr_main
  69 0030 00 08		ldrb	r0, [r0, #0]
  70 0032 02 5C		bl	outport_write
  71 0034 FC 5B		b	main_loop
  72           	
  73           	var_addr_main:
  74 0036 40 00		.word	var
  75           	
  76           	; Rotina:    outport_write
  77           	; Descricao: Escreve num porto de saida a 8 bits o valor passado como argumento.
  78           	;            Interface exemplo: void outport_write( uint8_t value );
  79           	; Entradas:  r0 - valor a escrever no porto de saida
  80           	; Saidas:    -
  81           	; Efeitos:   r1 - guarda o endereco do porto alvo da escrita
  82           	outport_write:
  83 0038 21 0C		ldr	r1, outport_addr
  84 003A 10 28		strb	r0, [r1, #0]
  85 003C 0F B7		mov	pc, lr
  86           	
  87           	outport_addr:
  88 003E C0 FF		.word	OUTPORT_ADDRESS
  89           	
  90           	; Seccao:    data
  91           	; Descricao: Guarda as variáveis globais com um valor inicial definido
  92           	;
  93           		.data
  94           	
  95           	; Seccao:    bss
  96           	; Descricao: Guarda as variáveis globais sem valor inicial definido
  97           	;
  98           		.bss
  99           	var:
 100 0040 00   		.space	1
 101           	
 102           	; Seccao:    stack
 103           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 104           	;
 105           		.stack
 106 0042 00   		.space	STACK_SIZE
 106 .... ..
 106 0081 00
 107           	tos:
