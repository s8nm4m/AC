P16 assembler v1.4.0 (Mar  6 2023)	c:\Users\ammit\Desktop\ISEL\2223\LEIC\s2\AC\AC\lab03\lab03.lst	Wed May 03 15:10:34 2023

Sections
Index   Name            Address   Size
0       startup         0000      000C 12
1       .text           000C      0060 96
2       .data           006C      0000 0
3       .bss            006C      0000 0
4       .stack          006C      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
i7check                 LABEL     0012 18     .text
inport_addr             LABEL     0050 80     .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  startup
inport_read             LABEL     004A 74     .text
line#19                 LABEL     0002 2      startup
loop                    LABEL     001E 30     .text
main                    LABEL     000C 12     .text
main_addr               LABEL     000A 10     startup
outport_addr            LABEL     0058 88     .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_write           LABEL     0052 82     .text
pisca                   LABEL     002E 46     .text
sleep                   LABEL     005A 90     .text
sleep_end               LABEL     006A 106    .text
sleep_inner_loop        LABEL     0062 98     .text
sleep_outer_loop        LABEL     005E 94     .text
STACK_SIZE              ABSOLUTE  0040 64     startup
tos                     LABEL     00AC 172    .stack
tos_addr                LABEL     0008 8      startup

Code listing
   1           	; Ficheiro:  lab03.S
   2           	; Descricao: Programa para a realização da 3a atividade laboratorial de
   3           	;            Arquitetura de Computadores.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      29-03-2023
   6           	
   7           	; Definicao dos valores dos simbolos utilizados no programa
   8           	;
   9          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  10           	; *** Para completar ***
  11          		.equ	INPORT_ADDRESS, 0xFF80        ; ??
  12          		.equ	OUTPORT_ADDRESS, 0xFFC0      ; ??
  13           	
  14           	; Seccao:    startup
  15           	; Descricao: Guarda o código de arranque do sistema
  16           	;
  17           		.section startup
  18 0000 01 58		b	_start
  19 0002 FF 5B		b	.
  20           	_start:
  21 0004 1D 0C		ldr	sp, tos_addr
  22 0006 1F 0C		ldr	pc, main_addr
  23           	
  24           	tos_addr:
  25 0008 AC 00		.word	tos
  26           	main_addr:
  27 000A 0C 00		.word	main
  28           	
  29           	; Seccao:    text
  30           	; Descricao: Guarda o código do programa
  31           	;
  32           		.text
  33           	
  34           	; Rotina:    main
  35           	; Descricao: *** Para completar ***
  36           	; Entradas:  *** Para completar ***
  37           	; Saidas:    *** Para completar ***
  38           	; Efeitos:   *** Para completar ***
  39           	main:
  40           		;mov	r0, #0x80
  41           		;bl	outport_write
  42 000C 05 60		mov r5, #0
  43 000E 1D 5C		bl inport_read
  44 0010 06 B0		mov r6, r0
  45           	
  46           	i7check:
  47 0012 12 60		mov r2, #1
  48 0014 10 BB		cmp r1, r6
  49 0016 06 B0		mov r6, r0
  50 0018 0A 44		bne pisca
  51 001A 01 58		b loop
  52 001C 16 5C		bl inport_read
  53           	
  54           	loop:
  55 001E F9 5F		bl	i7check
  56 0020 03 B0		mov r3, r0
  57 0022 04 68		mov r4, #0x80
  58 0024 33 C2		and r3, r3, r4
  59 0026 03 44		bne pisca
  60 0028 00 60		mov r0, #0
  61 002A 13 5C		bl outport_write
  62 002C F8 5B		b	loop
  63           	
  64           	pisca:
  65 002E 10 B0		mvn r0, r0
  66 0030 71 60		mov r1, #0x07
  67 0032 80 C0		and r0, r0, r1
  68 0034 02 80		add r2, r0, r0
  69 0036 22 81		add r2, r2, r2
  70 0038 20 80		add r0, r2, r0
  71 003A 0F 5C		bl sleep
  72 003C 95 B2		mvn r5, r5
  73 003E 12 60		mov r2, #0x01
  74 0040 50 C1		and r0, r5, r2
  75 0042 03 68		mov r3, #0x80 
  76 0044 80 81		add r0, r0, r3
  77 0046 05 5C		bl	outport_write
  78 0048 EA 5B		b loop
  79           	
  80           	; Rotina:    inport_read
  81           	; Descricao: *** Para completar ***
  82           	; Entradas:  -
  83           	; Saidas:    r0 - *** Para completar ***
  84           	; Efeitos:   r1 - *** Para completar ***
  85           	inport_read:
  86 004A 21 0C		ldr	r1, inport_addr
  87 004C 10 08		ldrb	r0, [r1, #0]
  88 004E 0F B7		mov	pc, lr
  89           	
  90           	inport_addr:
  91 0050 80 FF		.word	INPORT_ADDRESS
  92           	
  93           	; Rotina:    outport_write
  94           	; Descricao: *** Para completar ***
  95           	; Entradas:  r0 - *** Para completar ***
  96           	; Saidas:    -
  97           	; Efeitos:   r1 - *** Para completar ***
  98           	outport_write:
  99 0052 21 0C		ldr	r1, outport_addr
 100 0054 10 28		strb	r0, [r1, #0]
 101 0056 0F B7		mov	pc, lr
 102           	
 103           	outport_addr:
 104 0058 C0 FF		.word	OUTPORT_ADDRESS
 105           	
 106           	; Rotina:    sleep
 107           	; Descricao: *** Para completar ***
 108           	; Entradas:  *** Para completar ***
 109           	; Saidas:    *** Para completar ***
 110           	; Efeitos:   *** Para completar ***
 111           	sleep:
 112 005A 00 C0		and	r0, r0, r0
 113 005C 06 40		beq	sleep_end
 114           	sleep_outer_loop:
 115 005E E1 63		mov	r1, #0x3E
 116 0060 31 70		movt	r1, #0x03
 117           	sleep_inner_loop:
 118 0062 91 A8		sub	r1, r1, #1
 119 0064 FE 47		bne	sleep_inner_loop
 120 0066 80 A8		sub	r0, r0, #1
 121 0068 FA 47		bne	sleep_outer_loop
 122           	sleep_end:
 123 006A 0F B7		mov	pc, lr
 124           	
 125           	; Seccao:    data
 126           	; Descricao: Guarda as variáveis globais com um valor inicial definido
 127           	;
 128           		.data
 129           	
 130           	; Seccao:    bss
 131           	; Descricao: Guarda as variáveis globais sem valor inicial definido
 132           	;
 133           		.bss
 134           	
 135           	; Seccao:    stack
 136           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 137           	;
 138           		.stack
 139 006C 00   		.space	STACK_SIZE
 139 .... ..
 139 00AB 00
 140           	tos:
