P16 assembler v1.4.0 (Mar  6 2023)	t4.lst	Fri Jun 09 22:30:33 2023

Sections
Index   Name            Address   Size
0       .startup        0000      000E 14
1       .text           000E      015C 348
2       .data           016A      0002 2
3       .bss            016C      0000 0
4       .stack          016C      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
AVG_TIME                ABSOLUTE  00C8 200    .startup
CHANGE_PART             ABSOLUTE  0004 4      .startup
check_user              LABEL     0054 84     .text
delay                   LABEL     0034 52     .text
delay_end               LABEL     0040 64     .text
delay_loop              LABEL     0038 56     .text
delay_result            LABEL     0042 66     .text
delay_result_end        LABEL     004E 78     .text
delay_result_loop       LABEL     0048 72     .text
get_result              LABEL     00D4 212    .text
get_time                LABEL     009C 156    .text
in_scale                LABEL     00F4 244    .text
init                    LABEL     0010 16     .text
inport_addr             LABEL     015E 350    .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  .startup
inport_read             LABEL     0158 344    .text
isr                     LABEL     0116 278    .text
isr_addr                LABEL     000C 12     .startup
less_than_1             LABEL     00B2 178    .text
LIMIT                   ABSOLUTE  003F 63     .startup
main                    LABEL     000E 14     .text
main_addr               LABEL     000A 10     .startup
MAX_TIME                ABSOLUTE  000A 10     .startup
measure_time            LABEL     00BA 186    .text
MIN_TIME                ABSOLUTE  0001 1      .startup
mult_by_4               LABEL     0050 80     .text
MULT_BY_4               ABSOLUTE  0002 2      .startup
OFF                     ABSOLUTE  0000 0      .startup
ON                      ABSOLUTE  0001 1      .startup
OUT_OF_RANGE            ABSOLUTE  FFC0 65472  .startup
out_of_scale            LABEL     0104 260    .text
outport_addr            LABEL     0166 358    .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  .startup
outport_write           LABEL     0160 352    .text
over_10                 LABEL     00B6 182    .text
PTC_ADDR                LABEL     0156 342    .text
PTC_ADDRESS             ABSOLUTE  FF78 65400  .startup
PTC_CMD_START           ABSOLUTE  0000 0      .startup
PTC_CMD_STOP            ABSOLUTE  0001 1      .startup
ptc_get_value           LABEL     0150 336    .text
ptc_init                LABEL     012C 300    .text
ptc_start               LABEL     0140 320    .text
ptc_stop                LABEL     0148 328    .text
PTC_TC                  ABSOLUTE  0004 4      .startup
PTC_TCR                 ABSOLUTE  0000 0      .startup
PTC_TIR                 ABSOLUTE  0006 6      .startup
PTC_TMR                 ABSOLUTE  0002 2      .startup
REACT_TIME_FREQ         ABSOLUTE  0001 1      .startup
reset_sysclk            LABEL     0108 264    .text
RESULT                  ABSOLUTE  00FE 254    .startup
setup_test              LABEL     006C 108    .text
SHOW_RES_TIME           ABSOLUTE  0005 5      .startup
show_result             LABEL     00E2 226    .text
STACK_SIZE              ABSOLUTE  0040 64     .startup
STIMULUS                ABSOLUTE  0001 1      .startup
sysclk                  LABEL     016A 362    .data
sysclk_addr             LABEL     0168 360    .text
SYSCLK_FREQ             ABSOLUTE  00F9 249    .startup
sysclk_get_ticks        LABEL     0110 272    .text
test                    LABEL     0078 120    .text
TIME                    ABSOLUTE  00F0 240    .startup
TO_RESULT               ABSOLUTE  0001 1      .startup
tos                     LABEL     01AC 428    .stack
tos_addr                LABEL     0008 8      .startup
USER                    ABSOLUTE  0001 1      .startup
wait_time               LABEL     0084 132    .text
wait_user               LABEL     00C4 196    .text
wait_user_0to1          LABEL     0026 38     .text
wait_user_1to0          LABEL     001A 26     .text
wait_user_loop          LABEL     00C6 198    .text

Code listing
   1          	.equ STACK_SIZE, 64
   2           	;endereços dos port em uso
   3          	.equ INPORT_ADDRESS, 0xFF80
   4          	.equ OUTPORT_ADDRESS, 0xFFC0
   5          	.equ PTC_ADDRESS, 0xFF78
   6           	;offsets dos registos do ptc
   7          	.equ PTC_TCR, 0
   8          	.equ PTC_TMR, 2
   9          	.equ PTC_TC, 4
  10          	.equ PTC_TIR, 6 
  11           	;mascaras
  12          	.equ USER, 0x01
  13          	.equ STIMULUS, 0x01
  14          	.equ TIME, 0xF0
  15          	.equ RESULT, 0xFE
  16           	; Definicao dos valores dos simbolos utilizados no programa
  17          	.equ AVG_TIME, 200
  18          	.equ PTC_CMD_START, 0             
  19          	.equ PTC_CMD_STOP, 1
  20          	.equ LIMIT, 63
  21          	.equ OUT_OF_RANGE, -64
  22          	.equ MIN_TIME, 1
  23          	.equ MAX_TIME, 10
  24          	.equ MULT_BY_4, 2
  25          	.equ ON, 1
  26          	.equ OFF, 0
  27          	.equ CHANGE_PART, 4; de high para low ou de low para high
  28          	.equ TO_RESULT, 1
  29          	.equ SHOW_RES_TIME, 5
  30          	.equ SYSCLK_FREQ, 249
  31          	.equ REACT_TIME_FREQ, 1
  32           	
  33           	; Seccao:    startup
  34           	; Descricao: Guarda o código de arranque do sistema
  35           	.section .startup
  36 0000 01 58	    b _start
  37 0002 4F 0C	    ldr pc, isr_addr
  38           	
  39           	_start:
  40 0004 1D 0C	    ldr sp, tos_addr
  41 0006 1F 0C	    ldr pc, main_addr
  42           	
  43           	tos_addr:
  44 0008 AC 01	    .word tos
  45           	
  46           	main_addr:
  47 000A 0E 00	    .word main
  48           	
  49           	isr_addr:
  50 000C 16 01	    .word isr
  51           	
  52           	; Seccao:    text
  53           	; Descricao: Guarda o código do programa
  54           	.text
  55           	
  56           	main:
  57 000E 00 58	    b init
  58           	;estado inicial onde liga todos os leds 
  59           	init: 
  60 0010 10 60	    mov r0, #STIMULUS
  61 0012 E1 6F	    mov r1, #RESULT
  62 0014 80 C8	    orr r0, r0, r1
  63 0016 A4 5C	    bl outport_write
  64 0018 00 58	    b wait_user_1to0
  65           	;espera que o SW USER seja colocado a 0
  66           	wait_user_1to0:
  67 001A 9E 5C	    bl inport_read
  68 001C 11 60	    mov r1, #USER
  69 001E 80 C0	    and r0, r0, r1
  70 0020 01 60	    mov r1, #OFF
  71 0022 80 B8	    cmp r0, r1
  72 0024 FA 47	    bne wait_user_1to0
  73           	;espera que o SW USER seja colocado a 1
  74           	wait_user_0to1:
  75 0026 98 5C	    bl inport_read
  76 0028 11 60	    mov r1, #USER
  77 002A 80 C0	    and r0, r0, r1
  78 002C 11 60	    mov r1, #ON
  79 002E 80 B8	    cmp r0, r1
  80 0030 FA 47	    bne wait_user_0to1
  81 0032 1C 58	    b setup_test
  82           	;espera do tempo colocado pelo utilizador em segundos
  83           	;Entradas: R0 - numero de segundos a esperar
  84           	delay:
  85 0034 0E 24	    push lr
  86 0036 0C 5C	    bl mult_by_4
  87           	delay_loop:
  88 0038 0D 5C	    bl check_user
  89 003A 6A 5C	    bl sysclk_get_ticks
  90 003C 80 B8	    cmp r0, r1
  91 003E FC 47	    bne delay_loop
  92           	delay_end:
  93 0040 0F 04		pop pc
  94           	
  95           	;espera durante 'SHOW_RES_TIME' segundos
  96           	delay_result:
  97 0042 0E 24	    push lr
  98 0044 50 60	    mov r0, #SHOW_RES_TIME
  99 0046 04 5C	    bl mult_by_4
 100           	delay_result_loop:
 101 0048 63 5C	    bl sysclk_get_ticks
 102 004A 80 B8	    cmp r0, r1
 103 004C FD 47	    bne delay_result_loop
 104           	delay_result_end:
 105 004E 0F 04		pop pc
 106           	;multiplica o valor recebido em r0 por 4 e devolve o resultado em r1
 107           	mult_by_4:
 108 0050 01 E1	    lsl r1, r0, #MULT_BY_4
 109 0052 0F B7	    mov pc, lr
 110           	;verifica se o SW USER foi colocado a 0 e dá abort em caso positivo
 111           	check_user:
 112 0054 0E 24	    push lr
 113 0056 00 24	    push r0
 114 0058 01 24	    push r1
 115 005A 7E 5C	    bl inport_read
 116 005C 11 60	    mov r1, #USER
 117 005E 80 C0	    and r0, r0, r1
 118 0060 01 60	    mov r1, #OFF
 119 0062 80 B8	    cmp r0, r1
 120 0064 D5 43	    beq init
 121 0066 01 04	    pop r1
 122 0068 00 04	    pop r0
 123 006A 0F 04	    pop pc
 124           	;faz as preparações do teste, isto é, desliga todos os leds excepto o do STIMULUS
 125           	setup_test:
 126 006C 4D 5C	    bl reset_sysclk
 127 006E 16 5C	    bl get_time
 128 0070 03 B0	    mov r3, r0
 129 0072 10 60	    mov r0, #STIMULUS
 130 0074 75 5C	    bl outport_write
 131 0076 00 58	    b test
 132           	;estado de controlo do teste
 133           	test:
 134 0078 05 5C	    bl wait_time
 135 007A 00 60	    mov r0, #OFF
 136 007C 71 5C	    bl outport_write
 137 007E 1D 5C	    bl measure_time
 138 0080 29 5C	    bl get_result
 139 0082 C6 5B	    b init
 140           	;dá enable às interrupções e chama a função 'delay' para o tempo de espera
 141           	;indicado parando depois o contador do ptc e dando reset ao sysclk para 
 142           	;preparar a proxima contagem
 143           	wait_time:
 144 0084 0E 24	    push lr
 145 0086 90 6F	    mov r0, #SYSCLK_FREQ
 146 0088 51 5C	    bl ptc_init
 147 008A 60 B0	    mrs r0, cpsr ; lê valor actual do cpsr
 148 008C 01 61	    mov r1, #0x10 ; mask do bit a activar IE
 149 008E 80 C8	    orr r0, r0, r1 ; junta aos outros bits de estado
 150 0090 40 B0	    msr cpsr, r0 ; carrega novo cpsr
 151 0092 80 B1	    mov r0, r3
 152 0094 CF 5F	    bl delay
 153 0096 58 5C	    bl ptc_stop
 154 0098 37 5C	    bl reset_sysclk
 155 009A 0F 04	    pop pc 
 156           	;lê o tempo do inport, dando-lhe shift da parte alta para a parte baixa
 157           	;colocando-o dentro do range no caso em que esteja fora deste
 158           	get_time:
 159 009C 0E 24	    push lr
 160 009E 5C 5C	    bl inport_read
 161 00A0 01 6F	    mov r1, #TIME
 162 00A2 80 C0	    and r0, r0, r1
 163 00A4 00 EA	    lsr r0, r0, #CHANGE_PART
 164 00A6 00 C0	    and r0, r0, r0 
 165 00A8 04 40	    beq less_than_1
 166 00AA A1 60	    mov r1, #MAX_TIME
 167 00AC 80 B8	    cmp r0, r1
 168 00AE 03 50	    bge over_10
 169 00B0 0F 04	    pop pc 
 170           	;caso seja menor coloca o valor a 1
 171           	less_than_1:
 172 00B2 10 60	    mov r0, #MIN_TIME
 173 00B4 0F 04	    pop pc
 174           	;caso seja maior coloca o valor a 10
 175           	over_10:
 176 00B6 A0 60	    mov r0, #MAX_TIME
 177 00B8 0F 04	    pop pc
 178           	;reformata o ptc para medir em ms e depois chama a função 'wait_user'
 179           	measure_time:
 180 00BA 0E 24	    push lr
 181 00BC 10 60	    mov r0, #REACT_TIME_FREQ
 182 00BE 36 5C	    bl ptc_init
 183 00C0 01 5C	    bl wait_user
 184 00C2 0F 04	    pop pc
 185           	;espera que o utilizador coloque o SW de USER a 0
 186           	wait_user:
 187 00C4 0E 24	    push lr
 188           	wait_user_loop:
 189 00C6 48 5C	    bl inport_read
 190 00C8 11 60	    mov r1, #USER
 191 00CA 80 C0	    and r0, r0, r1
 192 00CC 01 60	    mov r1, #OFF
 193 00CE 80 B8	    cmp r0, r1
 194 00D0 FA 47	    bne wait_user_loop
 195 00D2 0F 04	    pop pc     
 196           	;verifica a diferença entre o valor medido e a média de 200 ms
 197           	;devolvendo o resultado em r0
 198           	get_result:
 199 00D4 0E 24	    push lr
 200 00D6 38 5C	    bl ptc_stop
 201 00D8 1B 5C	    bl sysclk_get_ticks
 202 00DA 82 6C	    mov r2, #AVG_TIME
 203 00DC 00 89	    sub r0, r0, r2
 204 00DE 01 5C	    bl show_result
 205 00E0 0F 04	    pop pc
 206           	;demonstra o resultado recebido em r0 e chama a função 'delay_result'
 207           	show_result:
 208 00E2 0E 24	    push lr
 209 00E4 07 5C	    bl in_scale
 210 00E6 80 E0	    lsl r0, r0, #TO_RESULT
 211 00E8 3B 5C	    bl outport_write
 212 00EA 0E 5C	    bl reset_sysclk
 213 00EC 90 6F	    mov r0, #SYSCLK_FREQ
 214 00EE 1E 5C	    bl ptc_init
 215 00F0 A8 5F	    bl delay_result
 216 00F2 0F 04	    pop pc
 217           	;verifica se o resultado está dentro da escala -63 a 63
 218           	in_scale:
 219 00F4 F1 63	    mov r1, #LIMIT
 220 00F6 80 B8	    cmp r0, r1
 221 00F8 05 50	    bge out_of_scale
 222 00FA 91 B0	    mvn r1, r1
 223 00FC 91 A0	    add r1, r1, #1
 224 00FE 10 B8	    cmp r1, r0 
 225 0100 01 50	    bge out_of_scale
 226 0102 0F B7	    mov pc, lr 
 227           	;caso não esteja na escala, devolve o valor de -64 em r0
 228           	out_of_scale:
 229 0104 00 6C	    mov r0, #OUT_OF_RANGE
 230 0106 0F B7	    mov pc, lr
 231           	;coloca o sysclk a 0
 232           	reset_sysclk:
 233 0108 F0 0E	    ldr r0, sysclk_addr
 234 010A 01 60	    mov r1, #OFF
 235 010C 01 20	    str r1, [r0]
 236 010E 0F B7	    mov pc, lr
 237           	;dá load ao valor da variável sysclk e devolve-o em r0
 238           	sysclk_get_ticks:
 239 0110 B0 0E		ldr r0 , sysclk_addr
 240 0112 00 00		ldr r0, [r0]
 241 0114 0F B7		mov pc, lr
 242           	;função de interrupção que incrementa o valor da variável 'sysclk'
 243           	isr:
 244 0116 00 24	    push r0
 245 0118 01 24	    push r1
 246 011A D0 0D	    ldr r0, PTC_ADDR
 247 011C 00 2B		strb r0, [r0, #PTC_TIR]
 248 011E 40 0E		ldr r0, sysclk_addr
 249 0120 01 00		ldr r1, [r0]
 250 0122 91 A0		add r1, r1, #1
 251 0124 01 20		str r1, [r0]
 252 0126 01 04	    pop r1
 253 0128 00 04	    pop r0
 254 012A 20 B0	    movs pc, lr
 255           	;inicia o ptc, colocando o valor recebido em r0 como TMR
 256           	ptc_init:
 257 012C 0E 24		push lr
 258 012E 00 24		push r0
 259 0130 0B 5C		bl ptc_stop
 260 0132 00 04		pop r0
 261 0134 81 67		mov r1, #PTC_ADDRESS & 0xFF
 262 0136 F1 7F	    movt r1, #(PTC_ADDRESS >> 8) & 0xFF
 263 0138 10 29	    strb r0, [r1, #PTC_TMR]
 264 013A 10 2B		strb r0, [r1, #PTC_TIR]
 265 013C 01 5C		bl ptc_start
 266 013E 0F 04		pop pc
 267           	;começa a contagem do ptc
 268           	ptc_start:
 269 0140 A0 0C		ldr	r0, PTC_ADDR
 270 0142 01 60		mov	r1, #PTC_CMD_START
 271 0144 01 28		strb r1, [r0, #PTC_TCR]
 272 0146 0F B7		mov	pc, lr
 273           	;para a contagem do ptc
 274           	ptc_stop:
 275 0148 60 0C		ldr	r0, PTC_ADDR
 276 014A 11 60		mov	r1, #PTC_CMD_STOP
 277 014C 01 28		strb r1, [r0, #PTC_TCR]
 278 014E 0F B7		mov	pc, lr
 279           	;vai ler o valor de contagem do ptc e devolve-o em r0
 280           	ptc_get_value:
 281 0150 21 0C		ldr	r1, PTC_ADDR
 282 0152 10 0A		ldrb r0, [r1, #PTC_TC]
 283 0154 0F B7		mov	pc, lr
 284           	
 285           	PTC_ADDR:
 286 0156 78 FF		.word PTC_ADDRESS
 287           	;lê o valor do inport, devolvendo-o em r0
 288           	inport_read:
 289 0158 21 0C		ldr	r1, inport_addr
 290 015A 10 08		ldrb r0, [r1]
 291 015C 0F B7		mov	pc, lr
 292           	
 293           	inport_addr:
 294 015E 80 FF		.word INPORT_ADDRESS
 295           	;escreve o valor de r0 no outport
 296           	outport_write:
 297 0160 21 0C		ldr	r1, outport_addr
 298 0162 10 28		strb r0, [r1]
 299 0164 0F B7		mov	pc, lr
 300           	
 301           	outport_addr:
 302 0166 C0 FF		.word OUTPORT_ADDRESS
 303           	
 304           	sysclk_addr:
 305 0168 6A 01	    .word sysclk
 306           	
 307           	.data
 308           	sysclk:
 309 016A 00 00		.word 0
 310           	
 311           	.bss
 312           	
 313           	    .stack
 314 016C 00   	    .space STACK_SIZE
 314 .... ..
 314 01AB 00
 315           	tos:  
